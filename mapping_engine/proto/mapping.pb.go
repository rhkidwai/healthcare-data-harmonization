// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: proto/mapping.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The mapping phase defines a conversion from some source to some destination
// model schema. The input to this phase is the output of the ingestion phase,
// and the output of this phase is an object like
// {
//     models: [{...}, {...}]
// }
// where {...} are generated from the root_mappings below.
type MappingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mapping of the root model elements.
	RootMapping []*FieldMapping `protobuf:"bytes,1,rep,name=root_mapping,json=rootMapping,proto3" json:"root_mapping,omitempty"`
	// All projectors to use.
	Projector []*ProjectorDefinition `protobuf:"bytes,2,rep,name=projector,proto3" json:"projector,omitempty"`
	// Post processing projectors that will run uniformly over all the converted
	// data.
	//
	// Types that are assignable to PostProcess:
	//	*MappingConfig_PostProcessProjectorName
	//	*MappingConfig_PostProcessProjectorDefinition
	PostProcess isMappingConfig_PostProcess `protobuf_oneof:"post_process"`
	// Metadata associated with the post_process field.
	PostProcessMeta *Meta `protobuf:"bytes,5,opt,name=post_process_meta,json=postProcessMeta,proto3" json:"post_process_meta,omitempty"`
}

func (x *MappingConfig) Reset() {
	*x = MappingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mapping_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MappingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MappingConfig) ProtoMessage() {}

func (x *MappingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mapping_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MappingConfig.ProtoReflect.Descriptor instead.
func (*MappingConfig) Descriptor() ([]byte, []int) {
	return file_proto_mapping_proto_rawDescGZIP(), []int{0}
}

func (x *MappingConfig) GetRootMapping() []*FieldMapping {
	if x != nil {
		return x.RootMapping
	}
	return nil
}

func (x *MappingConfig) GetProjector() []*ProjectorDefinition {
	if x != nil {
		return x.Projector
	}
	return nil
}

func (m *MappingConfig) GetPostProcess() isMappingConfig_PostProcess {
	if m != nil {
		return m.PostProcess
	}
	return nil
}

func (x *MappingConfig) GetPostProcessProjectorName() string {
	if x, ok := x.GetPostProcess().(*MappingConfig_PostProcessProjectorName); ok {
		return x.PostProcessProjectorName
	}
	return ""
}

func (x *MappingConfig) GetPostProcessProjectorDefinition() *ProjectorDefinition {
	if x, ok := x.GetPostProcess().(*MappingConfig_PostProcessProjectorDefinition); ok {
		return x.PostProcessProjectorDefinition
	}
	return nil
}

func (x *MappingConfig) GetPostProcessMeta() *Meta {
	if x != nil {
		return x.PostProcessMeta
	}
	return nil
}

type isMappingConfig_PostProcess interface {
	isMappingConfig_PostProcess()
}

type MappingConfig_PostProcessProjectorName struct {
	// The name of a preexisting projector to use to post-process the
	// resources.
	PostProcessProjectorName string `protobuf:"bytes,3,opt,name=post_process_projector_name,json=postProcessProjectorName,proto3,oneof"`
}

type MappingConfig_PostProcessProjectorDefinition struct {
	// The inline projector definition to use to post-process the
	// resources.
	PostProcessProjectorDefinition *ProjectorDefinition `protobuf:"bytes,4,opt,name=post_process_projector_definition,json=postProcessProjectorDefinition,proto3,oneof"`
}

func (*MappingConfig_PostProcessProjectorName) isMappingConfig_PostProcess() {}

func (*MappingConfig_PostProcessProjectorDefinition) isMappingConfig_PostProcess() {}

// Represents a value to be set in the output.
type ValueSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta `protobuf:"bytes,13,opt,name=meta,proto3" json:"meta,omitempty"`
	// Types that are assignable to Source:
	//	*ValueSource_FromSource
	//	*ValueSource_FromLocalVar
	//	*ValueSource_FromDestination
	//	*ValueSource_ProjectedValue
	//	*ValueSource_ConstString
	//	*ValueSource_ConstInt
	//	*ValueSource_ConstFloat
	//	*ValueSource_ConstBool
	//	*ValueSource_FromArg
	//	*ValueSource_FromInput
	Source isValueSource_Source `protobuf_oneof:"source"`
	// Metadata associated with the source field.
	SourceMeta *Meta `protobuf:"bytes,14,opt,name=source_meta,json=sourceMeta,proto3" json:"source_meta,omitempty"`
	// Additional arguments for the projector used to preprocess this argument. If
	// set, projector must be specified.
	AdditionalArg []*ValueSource `protobuf:"bytes,9,rep,name=additional_arg,json=additionalArg,proto3" json:"additional_arg,omitempty"`
	// Projector to use to preprocess this argument. Defaults to identity
	// function. Projectors prefixed with _ are built-ins.
	Projector string `protobuf:"bytes,10,opt,name=projector,proto3" json:"projector,omitempty"`
}

func (x *ValueSource) Reset() {
	*x = ValueSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mapping_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSource) ProtoMessage() {}

func (x *ValueSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mapping_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSource.ProtoReflect.Descriptor instead.
func (*ValueSource) Descriptor() ([]byte, []int) {
	return file_proto_mapping_proto_rawDescGZIP(), []int{1}
}

func (x *ValueSource) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (m *ValueSource) GetSource() isValueSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

// Deprecated: Do not use.
func (x *ValueSource) GetFromSource() string {
	if x, ok := x.GetSource().(*ValueSource_FromSource); ok {
		return x.FromSource
	}
	return ""
}

func (x *ValueSource) GetFromLocalVar() string {
	if x, ok := x.GetSource().(*ValueSource_FromLocalVar); ok {
		return x.FromLocalVar
	}
	return ""
}

func (x *ValueSource) GetFromDestination() string {
	if x, ok := x.GetSource().(*ValueSource_FromDestination); ok {
		return x.FromDestination
	}
	return ""
}

func (x *ValueSource) GetProjectedValue() *ValueSource {
	if x, ok := x.GetSource().(*ValueSource_ProjectedValue); ok {
		return x.ProjectedValue
	}
	return nil
}

func (x *ValueSource) GetConstString() string {
	if x, ok := x.GetSource().(*ValueSource_ConstString); ok {
		return x.ConstString
	}
	return ""
}

func (x *ValueSource) GetConstInt() int32 {
	if x, ok := x.GetSource().(*ValueSource_ConstInt); ok {
		return x.ConstInt
	}
	return 0
}

func (x *ValueSource) GetConstFloat() float32 {
	if x, ok := x.GetSource().(*ValueSource_ConstFloat); ok {
		return x.ConstFloat
	}
	return 0
}

func (x *ValueSource) GetConstBool() bool {
	if x, ok := x.GetSource().(*ValueSource_ConstBool); ok {
		return x.ConstBool
	}
	return false
}

// Deprecated: Do not use.
func (x *ValueSource) GetFromArg() int32 {
	if x, ok := x.GetSource().(*ValueSource_FromArg); ok {
		return x.FromArg
	}
	return 0
}

func (x *ValueSource) GetFromInput() *ValueSource_InputSource {
	if x, ok := x.GetSource().(*ValueSource_FromInput); ok {
		return x.FromInput
	}
	return nil
}

func (x *ValueSource) GetSourceMeta() *Meta {
	if x != nil {
		return x.SourceMeta
	}
	return nil
}

func (x *ValueSource) GetAdditionalArg() []*ValueSource {
	if x != nil {
		return x.AdditionalArg
	}
	return nil
}

func (x *ValueSource) GetProjector() string {
	if x != nil {
		return x.Projector
	}
	return ""
}

type isValueSource_Source interface {
	isValueSource_Source()
}

type ValueSource_FromSource struct {
	// A field that comes from the source/input data. This refers to the
	// arguments of the projector or context.
	// If given multiple arguments, then:
	//
	//  - "1" refers to the first argument
	//  - "2" refers to the second, and so on.
	//
	// If given only one argument, then:
	//
	//  - "." refers to the argument
	//  - "1" or "xyz" refers to its first sub-element/child with that key
	//  - "2" or "abc" refers to the second sub-element/child with that key
	//    etc.
	// If that sole argument is an array, then:
	//
	//  - "0" or "[0]" refers to its first element
	//  - "1" or "[1]" refers to the second
	//  - "." refers to the whole array
	//  - "[]" means that the following projector is applied to each element
	//
	// DEPRECATED: Use from_input instead.
	//
	// Deprecated: Do not use.
	FromSource string `protobuf:"bytes,1,opt,name=from_source,json=fromSource,proto3,oneof"`
}

type ValueSource_FromLocalVar struct {
	// Data coming from a local variable. This must have been set by the current
	// or parent projector.
	// If the variable is an array, appending "[]" means that the following
	// projector is applied to each element.
	FromLocalVar string `protobuf:"bytes,2,opt,name=from_local_var,json=fromLocalVar,proto3,oneof"`
}

type ValueSource_FromDestination struct {
	// A field that is set at some point during the conversion in the mapping
	// destination JSON.
	FromDestination string `protobuf:"bytes,3,opt,name=from_destination,json=fromDestination,proto3,oneof"`
}

type ValueSource_ProjectedValue struct {
	// A value preprocessed with a projector.
	ProjectedValue *ValueSource `protobuf:"bytes,4,opt,name=projected_value,json=projectedValue,proto3,oneof"`
}

type ValueSource_ConstString struct {
	// A hard-coded string value.
	ConstString string `protobuf:"bytes,5,opt,name=const_string,json=constString,proto3,oneof"`
}

type ValueSource_ConstInt struct {
	// A hard-coded integer value.
	ConstInt int32 `protobuf:"varint,6,opt,name=const_int,json=constInt,proto3,oneof"`
}

type ValueSource_ConstFloat struct {
	// A hard-coded floating point value.
	ConstFloat float32 `protobuf:"fixed32,7,opt,name=const_float,json=constFloat,proto3,oneof"`
}

type ValueSource_ConstBool struct {
	// A hard-coded boolean value.
	ConstBool bool `protobuf:"varint,8,opt,name=const_bool,json=constBool,proto3,oneof"`
}

type ValueSource_FromArg struct {
	// Refer to a specific argument. This is a simpler version of from_source.
	// 1 refers to the 1st argument, 2 to the second, etc. 0 refers to the whole
	// arguments array.
	//
	// DEPRECATED: Use from_input instead.
	//
	// Deprecated: Do not use.
	FromArg int32 `protobuf:"varint,11,opt,name=from_arg,json=fromArg,proto3,oneof"`
}

type ValueSource_FromInput struct {
	FromInput *ValueSource_InputSource `protobuf:"bytes,12,opt,name=from_input,json=fromInput,proto3,oneof"`
}

func (*ValueSource_FromSource) isValueSource_Source() {}

func (*ValueSource_FromLocalVar) isValueSource_Source() {}

func (*ValueSource_FromDestination) isValueSource_Source() {}

func (*ValueSource_ProjectedValue) isValueSource_Source() {}

func (*ValueSource_ConstString) isValueSource_Source() {}

func (*ValueSource_ConstInt) isValueSource_Source() {}

func (*ValueSource_ConstFloat) isValueSource_Source() {}

func (*ValueSource_ConstBool) isValueSource_Source() {}

func (*ValueSource_FromArg) isValueSource_Source() {}

func (*ValueSource_FromInput) isValueSource_Source() {}

type FieldMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta `protobuf:"bytes,7,opt,name=meta,proto3" json:"meta,omitempty"`
	// The source sub-element selector. Each one is a consequent argument
	// to the projector (unless one is an array, in which case it is expanded
	// and each element passed to the projector in individual invocations).
	ValueSource *ValueSource `protobuf:"bytes,1,opt,name=value_source,json=valueSource,proto3" json:"value_source,omitempty"`
	// The target element to set to the output of the source. Should be in JSON
	// dot notation. This can be a complex JSON object, or a JSON value field,
	// or an array (arrays must be suffixed with []).
	//
	// Types that are assignable to Target:
	//	*FieldMapping_TargetField
	//	*FieldMapping_TargetLocalVar
	//	*FieldMapping_TargetObject
	//	*FieldMapping_TargetRootField
	Target isFieldMapping_Target `protobuf_oneof:"target"`
	// Metadata associated with the target field.
	TargetMeta *Meta `protobuf:"bytes,8,opt,name=target_meta,json=targetMeta,proto3" json:"target_meta,omitempty"`
	// A value that determines whether to apply this field mapping.
	// It is only applied if this value is true.
	Condition *ValueSource `protobuf:"bytes,5,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *FieldMapping) Reset() {
	*x = FieldMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mapping_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldMapping) ProtoMessage() {}

func (x *FieldMapping) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mapping_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldMapping.ProtoReflect.Descriptor instead.
func (*FieldMapping) Descriptor() ([]byte, []int) {
	return file_proto_mapping_proto_rawDescGZIP(), []int{2}
}

func (x *FieldMapping) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *FieldMapping) GetValueSource() *ValueSource {
	if x != nil {
		return x.ValueSource
	}
	return nil
}

func (m *FieldMapping) GetTarget() isFieldMapping_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *FieldMapping) GetTargetField() string {
	if x, ok := x.GetTarget().(*FieldMapping_TargetField); ok {
		return x.TargetField
	}
	return ""
}

func (x *FieldMapping) GetTargetLocalVar() string {
	if x, ok := x.GetTarget().(*FieldMapping_TargetLocalVar); ok {
		return x.TargetLocalVar
	}
	return ""
}

// Deprecated: Do not use.
func (x *FieldMapping) GetTargetObject() string {
	if x, ok := x.GetTarget().(*FieldMapping_TargetObject); ok {
		return x.TargetObject
	}
	return ""
}

func (x *FieldMapping) GetTargetRootField() string {
	if x, ok := x.GetTarget().(*FieldMapping_TargetRootField); ok {
		return x.TargetRootField
	}
	return ""
}

func (x *FieldMapping) GetTargetMeta() *Meta {
	if x != nil {
		return x.TargetMeta
	}
	return nil
}

func (x *FieldMapping) GetCondition() *ValueSource {
	if x != nil {
		return x.Condition
	}
	return nil
}

type isFieldMapping_Target interface {
	isFieldMapping_Target()
}

type FieldMapping_TargetField struct {
	// Target a leaf or non-leaf field in the output. Be aware that any data
	// written to an output field cannot be overwritten. Use target_local_var
	// for outputting data that needs to be changed before ending up in a field.
	TargetField string `protobuf:"bytes,2,opt,name=target_field,json=targetField,proto3,oneof"`
}

type FieldMapping_TargetLocalVar struct {
	// Target a variable that will not be output (all projectors called by this
	// one or its descendants can access this variable). This may overwrite
	// existing variable values/fields.
	TargetLocalVar string `protobuf:"bytes,3,opt,name=target_local_var,json=targetLocalVar,proto3,oneof"`
}

type FieldMapping_TargetObject struct {
	// DEPRECATED(b/148284692): Use target_root_field instead.
	//
	// Deprecated: Do not use.
	TargetObject string `protobuf:"bytes,4,opt,name=target_object,json=targetObject,proto3,oneof"`
}

type FieldMapping_TargetRootField struct {
	// Target a field from the root mappings.
	TargetRootField string `protobuf:"bytes,6,opt,name=target_root_field,json=targetRootField,proto3,oneof"`
}

func (*FieldMapping_TargetField) isFieldMapping_Target() {}

func (*FieldMapping_TargetLocalVar) isFieldMapping_Target() {}

func (*FieldMapping_TargetObject) isFieldMapping_Target() {}

func (*FieldMapping_TargetRootField) isFieldMapping_Target() {}

// A projector is a function that converts one or more input elements into
// one output element.
type ProjectorDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Meta `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	// The name of the projector, as referred to by the ValueSource.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A list of mappings for this projector.
	Mapping []*FieldMapping `protobuf:"bytes,2,rep,name=mapping,proto3" json:"mapping,omitempty"`
}

func (x *ProjectorDefinition) Reset() {
	*x = ProjectorDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mapping_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectorDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectorDefinition) ProtoMessage() {}

func (x *ProjectorDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mapping_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectorDefinition.ProtoReflect.Descriptor instead.
func (*ProjectorDefinition) Descriptor() ([]byte, []int) {
	return file_proto_mapping_proto_rawDescGZIP(), []int{3}
}

func (x *ProjectorDefinition) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ProjectorDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectorDefinition) GetMapping() []*FieldMapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

// Custom metadata entries.
type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entry type to metadata map.
	Entries map[string]*anypb.Any `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mapping_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mapping_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_proto_mapping_proto_rawDescGZIP(), []int{4}
}

func (x *Meta) GetEntries() map[string]*anypb.Any {
	if x != nil {
		return x.Entries
	}
	return nil
}

// Represents a position in Whistle source code.
type SourcePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Line number, starting at 1.
	Line int32 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	// Column number, starting at 0 (byte count).
	Column int32 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *SourcePosition) Reset() {
	*x = SourcePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mapping_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourcePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourcePosition) ProtoMessage() {}

func (x *SourcePosition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mapping_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourcePosition.ProtoReflect.Descriptor instead.
func (*SourcePosition) Descriptor() ([]byte, []int) {
	return file_proto_mapping_proto_rawDescGZIP(), []int{5}
}

func (x *SourcePosition) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *SourcePosition) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

type ValueSource_InputSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number (1-based) of the projector argument to reference. If omitted
	// or set to 0, will search for the given field in context values. A context
	// value references a sibling (or as close as possible) to one of this
	// projector's arguments, that has an absolute path as specified in field
	// (omitting array indices). For example, if a projector gets an argument
	// with full path foo[3].bar[0].baz.bonk, and arg is set to 0, and field is
	// set to foo.bar.quip, then this InputSource resolves to the value at
	// foo[3].bar[0].quip.
	Arg int32 `protobuf:"varint,1,opt,name=arg,proto3" json:"arg,omitempty"`
	// Optionally, the JSON field/path on the argument to extract, e.g.
	// "foo.bar". Can be suffixed with [] to enumerate an array, invoking the
	// projector passed to on every element individually.
	Field string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *ValueSource_InputSource) Reset() {
	*x = ValueSource_InputSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mapping_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSource_InputSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSource_InputSource) ProtoMessage() {}

func (x *ValueSource_InputSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mapping_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSource_InputSource.ProtoReflect.Descriptor instead.
func (*ValueSource_InputSource) Descriptor() ([]byte, []int) {
	return file_proto_mapping_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ValueSource_InputSource) GetArg() int32 {
	if x != nil {
		return x.Arg
	}
	return 0
}

func (x *ValueSource_InputSource) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

var File_proto_mapping_proto protoreflect.FileDescriptor

var file_proto_mapping_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x64, 0x77, 0x2e, 0x65, 0x74, 0x6c, 0x2e,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x03, 0x0a, 0x0d, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x0c, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63,
	0x61, 0x72, 0x65, 0x2e, 0x63, 0x64, 0x77, 0x2e, 0x65, 0x74, 0x6c, 0x2e, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x64, 0x77, 0x2e, 0x65, 0x74,
	0x6c, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3f,
	0x0a, 0x1b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x18, 0x70, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x88, 0x01, 0x0a, 0x21, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x2e, 0x63,
	0x64, 0x77, 0x2e, 0x65, 0x74, 0x6c, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x70, 0x6f, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x11, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x64, 0x77, 0x2e, 0x65, 0x74, 0x6c,
	0x2e, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x22, 0xc0, 0x06, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x63, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x64, 0x77, 0x2e, 0x65, 0x74, 0x6c, 0x2e, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x48,
	0x00, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x56, 0x61, 0x72, 0x12, 0x2b, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x2e, 0x63,
	0x64, 0x77, 0x2e, 0x65, 0x74, 0x6c, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01,
	0x48, 0x00, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x72, 0x67, 0x12, 0x60, 0x0a, 0x0a, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61,
	0x72, 0x65, 0x2e, 0x63, 0x64, 0x77, 0x2e, 0x65, 0x74, 0x6c, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x4d, 0x0a,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x63, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x64, 0x77, 0x2e, 0x65, 0x74, 0x6c, 0x2e, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x0e,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x64, 0x77, 0x2e, 0x65, 0x74, 0x6c, 0x2e,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x72, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x35, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x61, 0x72, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x08, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xfe, 0x03, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x64, 0x77, 0x2e, 0x65, 0x74,
	0x6c, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63,
	0x61, 0x72, 0x65, 0x2e, 0x63, 0x64, 0x77, 0x2e, 0x65, 0x74, 0x6c, 0x2e, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x56, 0x61, 0x72, 0x12, 0x29, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x4d, 0x0a, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x63, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x64, 0x77, 0x2e, 0x65, 0x74, 0x6c, 0x2e, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72,
	0x65, 0x2e, 0x63, 0x64, 0x77, 0x2e, 0x65, 0x74, 0x6c, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72,
	0x65, 0x2e, 0x63, 0x64, 0x77, 0x2e, 0x65, 0x74, 0x6c, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x64, 0x77, 0x2e, 0x65,
	0x74, 0x6c, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0xad, 0x01, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x53, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63,
	0x61, 0x72, 0x65, 0x2e, 0x63, 0x64, 0x77, 0x2e, 0x65, 0x74, 0x6c, 0x2e, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x1a, 0x50, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x86, 0x01, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x63, 0x61, 0x72, 0x65, 0x2e, 0x65, 0x74, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x0a,
	0x45, 0x54, 0x4c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x63, 0x61, 0x72, 0x65, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x68, 0x61, 0x72, 0x6d, 0x6f,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_mapping_proto_rawDescOnce sync.Once
	file_proto_mapping_proto_rawDescData = file_proto_mapping_proto_rawDesc
)

func file_proto_mapping_proto_rawDescGZIP() []byte {
	file_proto_mapping_proto_rawDescOnce.Do(func() {
		file_proto_mapping_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_mapping_proto_rawDescData)
	})
	return file_proto_mapping_proto_rawDescData
}

var file_proto_mapping_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_mapping_proto_goTypes = []interface{}{
	(*MappingConfig)(nil),           // 0: cloud.healthcare.cdw.etl.mapping.proto.MappingConfig
	(*ValueSource)(nil),             // 1: cloud.healthcare.cdw.etl.mapping.proto.ValueSource
	(*FieldMapping)(nil),            // 2: cloud.healthcare.cdw.etl.mapping.proto.FieldMapping
	(*ProjectorDefinition)(nil),     // 3: cloud.healthcare.cdw.etl.mapping.proto.ProjectorDefinition
	(*Meta)(nil),                    // 4: cloud.healthcare.cdw.etl.mapping.proto.Meta
	(*SourcePosition)(nil),          // 5: cloud.healthcare.cdw.etl.mapping.proto.SourcePosition
	(*ValueSource_InputSource)(nil), // 6: cloud.healthcare.cdw.etl.mapping.proto.ValueSource.InputSource
	nil,                             // 7: cloud.healthcare.cdw.etl.mapping.proto.Meta.EntriesEntry
	(*anypb.Any)(nil),               // 8: google.protobuf.Any
}
var file_proto_mapping_proto_depIdxs = []int32{
	2,  // 0: cloud.healthcare.cdw.etl.mapping.proto.MappingConfig.root_mapping:type_name -> cloud.healthcare.cdw.etl.mapping.proto.FieldMapping
	3,  // 1: cloud.healthcare.cdw.etl.mapping.proto.MappingConfig.projector:type_name -> cloud.healthcare.cdw.etl.mapping.proto.ProjectorDefinition
	3,  // 2: cloud.healthcare.cdw.etl.mapping.proto.MappingConfig.post_process_projector_definition:type_name -> cloud.healthcare.cdw.etl.mapping.proto.ProjectorDefinition
	4,  // 3: cloud.healthcare.cdw.etl.mapping.proto.MappingConfig.post_process_meta:type_name -> cloud.healthcare.cdw.etl.mapping.proto.Meta
	4,  // 4: cloud.healthcare.cdw.etl.mapping.proto.ValueSource.meta:type_name -> cloud.healthcare.cdw.etl.mapping.proto.Meta
	1,  // 5: cloud.healthcare.cdw.etl.mapping.proto.ValueSource.projected_value:type_name -> cloud.healthcare.cdw.etl.mapping.proto.ValueSource
	6,  // 6: cloud.healthcare.cdw.etl.mapping.proto.ValueSource.from_input:type_name -> cloud.healthcare.cdw.etl.mapping.proto.ValueSource.InputSource
	4,  // 7: cloud.healthcare.cdw.etl.mapping.proto.ValueSource.source_meta:type_name -> cloud.healthcare.cdw.etl.mapping.proto.Meta
	1,  // 8: cloud.healthcare.cdw.etl.mapping.proto.ValueSource.additional_arg:type_name -> cloud.healthcare.cdw.etl.mapping.proto.ValueSource
	4,  // 9: cloud.healthcare.cdw.etl.mapping.proto.FieldMapping.meta:type_name -> cloud.healthcare.cdw.etl.mapping.proto.Meta
	1,  // 10: cloud.healthcare.cdw.etl.mapping.proto.FieldMapping.value_source:type_name -> cloud.healthcare.cdw.etl.mapping.proto.ValueSource
	4,  // 11: cloud.healthcare.cdw.etl.mapping.proto.FieldMapping.target_meta:type_name -> cloud.healthcare.cdw.etl.mapping.proto.Meta
	1,  // 12: cloud.healthcare.cdw.etl.mapping.proto.FieldMapping.condition:type_name -> cloud.healthcare.cdw.etl.mapping.proto.ValueSource
	4,  // 13: cloud.healthcare.cdw.etl.mapping.proto.ProjectorDefinition.meta:type_name -> cloud.healthcare.cdw.etl.mapping.proto.Meta
	2,  // 14: cloud.healthcare.cdw.etl.mapping.proto.ProjectorDefinition.mapping:type_name -> cloud.healthcare.cdw.etl.mapping.proto.FieldMapping
	7,  // 15: cloud.healthcare.cdw.etl.mapping.proto.Meta.entries:type_name -> cloud.healthcare.cdw.etl.mapping.proto.Meta.EntriesEntry
	8,  // 16: cloud.healthcare.cdw.etl.mapping.proto.Meta.EntriesEntry.value:type_name -> google.protobuf.Any
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_proto_mapping_proto_init() }
func file_proto_mapping_proto_init() {
	if File_proto_mapping_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_mapping_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MappingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mapping_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mapping_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mapping_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectorDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mapping_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mapping_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourcePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mapping_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSource_InputSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_mapping_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MappingConfig_PostProcessProjectorName)(nil),
		(*MappingConfig_PostProcessProjectorDefinition)(nil),
	}
	file_proto_mapping_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ValueSource_FromSource)(nil),
		(*ValueSource_FromLocalVar)(nil),
		(*ValueSource_FromDestination)(nil),
		(*ValueSource_ProjectedValue)(nil),
		(*ValueSource_ConstString)(nil),
		(*ValueSource_ConstInt)(nil),
		(*ValueSource_ConstFloat)(nil),
		(*ValueSource_ConstBool)(nil),
		(*ValueSource_FromArg)(nil),
		(*ValueSource_FromInput)(nil),
	}
	file_proto_mapping_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*FieldMapping_TargetField)(nil),
		(*FieldMapping_TargetLocalVar)(nil),
		(*FieldMapping_TargetObject)(nil),
		(*FieldMapping_TargetRootField)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_mapping_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_mapping_proto_goTypes,
		DependencyIndexes: file_proto_mapping_proto_depIdxs,
		MessageInfos:      file_proto_mapping_proto_msgTypes,
	}.Build()
	File_proto_mapping_proto = out.File
	file_proto_mapping_proto_rawDesc = nil
	file_proto_mapping_proto_goTypes = nil
	file_proto_mapping_proto_depIdxs = nil
}
